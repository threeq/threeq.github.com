<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>架构 on Threeq - 出井的青蛙</title>
    <link>https://blog.three3q.com/categories/%E6%9E%B6%E6%9E%84/</link>
    <description>Recent content in 架构 on Threeq - 出井的青蛙</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 13 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.three3q.com/categories/%E6%9E%B6%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>架构师：《百度的春晚战事》给我们的启示 — 粗略估算</title>
      <link>https://blog.three3q.com/post/articles/architecture/rough-estimate/</link>
      <pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.three3q.com/post/articles/architecture/rough-estimate/</guid>
      <description>&lt;p&gt;春节期间大家一边看着春晚，一边拿着百度 APP 顺利的抢着红包，作为一枚标准程序员的我，同时不停刷着各个技术网站和论坛，依据之前“春晚红包”的经验，出问题后很快就会有问题分析文章出来（特别是第一波红包），借此机会又可以学习一波（毕竟别人的经验，就是我们最好的学习教材）。但是今年并没有，也没有相关技术文章出来，可能大家没有太大感觉，作为给客户做过春节红包系统的我（当然我们的量是很小的，当时我们还盯着给客户做的春节红包系统呢^_^）发自内心对百度技术的佩服：抗住了，百度牛逼！。作为标准程序员的我们，怎么能停止在佩服的层面就行了呢？对吧！百度是怎么抗住的？用了多少服务器？怎么估算的的服务器？这些问题一直困惑我，也促使我不断思考。直到春节后百度出了一篇文章 &lt;a href=&#34;https://mp.weixin.qq.com/s/W9Nbq64v9doYPxcCLBsqNQ&#34;&gt;《百度的春晚战事》&lt;/a&gt; ，简要介绍了这次“百度春晚项目“的大致流程，项目过程也是波澜壮阔、成叠起伏（建议大家可以看一下），不过其中包含的少量技术数据才是我关注的重点，不过通过这些数据也能粗粒度的解惑我之前问题，这里就从&lt;code&gt;系统容量&lt;/code&gt;估算角度阐述我得到的启示——&lt;strong&gt;粗略估算&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>架构师：使用 traefik &#43; consul &#43; docker 实现简单可扩展架构</title>
      <link>https://blog.three3q.com/post/articles/architecture/architect-traefik-consul-docker/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.three3q.com/post/articles/architecture/architect-traefik-consul-docker/</guid>
      <description>&lt;h1 id=&#34;一种常见的简单架构&#34;&gt;一种常见的简单架构&lt;/h1&gt;

&lt;p&gt;在微服务架构的驱动下，我们的服务被拆分得越来越细，同时随着业务的增长服务也会越来越多，这就要求系统有更高的扩展能力，同时尽力保持架构的简洁性，对业务代码最少的侵入性，同时能支持异构系统更好。目前比较常见的一种服务架构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ws4.sinaimg.cn/large/006tKfTcgy1g0xtnk369fj30mi0lugmb.jpg&#34; alt=&#34;常见 Web 服务架构&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这里首先介绍接入层和 web 层的扩展性方案和实施。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>架构师：REST API 设计实践</title>
      <link>https://blog.three3q.com/post/articles/architecture/rest-api-design/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.three3q.com/post/articles/architecture/rest-api-design/</guid>
      <description>&lt;h1 id=&#34;简介&#34;&gt;简介&lt;/h1&gt;

&lt;p&gt;REST 这个词是 &lt;a href=&#34;http://en.wikipedia.org/wiki/Roy_Fielding&#34;&gt;Roy Thomas Fielding&lt;/a&gt; 在他2000年的&lt;a href=&#34;http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm&#34;&gt;博士论文&lt;/a&gt;中提出的，是 Representational State Transfer 的简称，我翻译为“表现层状态转移”。 REST 描述的是一种架构风格，指的是一组架构约束条件和原则，满足这些约束条件和原则的应用程序或设计，就称它为RESTful架构。&lt;/p&gt;

&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;资源（Resources） REST是”表现层状态转化”，其实它省略了主语。”表现层”其实指的是”资源”的”表现层”。那么什么是资源呢？就是我们平常上网访问的一张图片、一个文档、一个视频等。这些资源我们通过URI来定位，也就是一个URI表示一个资源。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;表象（Representational）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;资源是做一个具体的实体信息，他可以有多种的展现方式。而把实体展现出来就是表现层，例如一个txt文本信息，他可以输出成html、json、xml等格式，一个图片他可以jpg、png等方式展现，这个就是表现层的意思。&lt;/p&gt;

&lt;p&gt;URI确定一个资源的实体，但是如何确定它的具体表现形式呢？应该在 HTTP 请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;状态转移（State Transfer）访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，肯定涉及到数据和状态的转移。而HTTP协议是无状态的，那么这些状态肯定保存在服务器端，所以如果客户端想要通知服务器端改变数据和状态的变化，肯定要通过某种方式来通知它。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;richardson-maturity-model&#34;&gt;Richardson Maturity Model&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://ws2.sinaimg.cn/large/006tKfTcly1g0ayi1nf26j30ip0b20ts.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;有关成熟度的文章&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.crummy.com&#34;&gt;Leonard Richardson&lt;/a&gt;：&lt;a href=&#34;https://www.crummy.com/writing/speaking/2008-QCon/&#34;&gt;https://www.crummy.com/writing/speaking/2008-QCon/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://martinfowler.com/&#34;&gt;Martin Fowler&lt;/a&gt;：&lt;a href=&#34;https://martinfowler.com/articles/richardsonMaturityModel.html&#34;&gt;https://martinfowler.com/articles/richardsonMaturityModel.html&lt;/a&gt; &lt;a href=&#34;https://blog.csdn.net/dm_vincent/article/details/51341037&#34;&gt;（译文）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>