<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端 on Threeq - 出井的青蛙</title>
    <link>https://blog.three3q.com/tags/%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in 前端 on Threeq - 出井的青蛙</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 27 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.three3q.com/tags/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>前端分层架构实战（一）</title>
      <link>https://blog.three3q.com/post/web/web-frontend-arch-practice/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.three3q.com/post/web/web-frontend-arch-practice/</guid>
      <description>&lt;p&gt;整个《前端分层架构实战》分成两部分：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;前端分层架构实战（一）：分层架构问题分析和结构设计&lt;/li&gt;
&lt;li&gt;前端分层架构实战（二）：分层架构项目规划和工程实施&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;本文是其中的第一篇。&lt;/p&gt;

&lt;p&gt;随着微服务兴起前后端分离架构的越来越流行，前端的负责的开发任务越来越重，功能复杂度和代码量也越来越高，在同一个项目投入的前端人力也是越来越多，这个时候需要我们使用更加高效的方式来组织我们的代码结构。目前前端有很多框架帮我们做了很多这方面的工作，比如目前比较流行的的三大框架：angular、vue、react。但是我们在实际使用的时候往往发现，使用他们的命令行工具生成了一个工程，可以进行开发了，但是真正应用到真实项目中的时候，往往有力不从心的感觉，特别是企业及的项目中，这是由于它们做的只是从技术层面上解决了代码组织方式，并没有给出结合业务时项目里的组织结构和组织方法。而这些正是软件架构所解决的问题，软件架构正在后端开发中大放异彩，那我们能不能也在前端开发中引入软件架构方法，来解决前端日益复杂的开发需求呢？答案是肯定的，下面简单说一下我自己在这里面的实践总结，由于个人能力有限，有不正确的地方欢迎大家指正。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>